// <auto-generated />
using System;
using Inventory.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Inventory.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(InventoryDbContext))]
    [Migration("20241020111845_PriceToDouble")]
    partial class PriceToDouble
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("Inventory.Domain.Goods.Goods", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("GoodsId");

                    b.HasKey("Id");

                    b.ToTable("Goods", (string)null);
                });

            modelBuilder.Entity("Inventory.Domain.Order.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("OrderId");

                    b.HasKey("Id");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("Inventory.Domain.Goods.Goods", b =>
                {
                    b.OwnsOne("Inventory.Domain.Goods.ValueObjects.GoodsAmount", "Amount", b1 =>
                        {
                            b1.Property<Guid>("GoodsId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Value")
                                .HasColumnType("INTEGER");

                            b1.HasKey("GoodsId");

                            b1.ToTable("Goods");

                            b1.WithOwner()
                                .HasForeignKey("GoodsId");
                        });

                    b.OwnsOne("Inventory.Domain.Goods.ValueObjects.GoodsName", "Name", b1 =>
                        {
                            b1.Property<Guid>("GoodsId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("GoodsId");

                            b1.ToTable("Goods");

                            b1.WithOwner()
                                .HasForeignKey("GoodsId");
                        });

                    b.Navigation("Amount")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Inventory.Domain.Order.Order", b =>
                {
                    b.OwnsOne("Inventory.Domain.Order.ValueObjects.OrderAddress", "Address", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<int>("State")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("StreetAndNumber")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsOne("Inventory.Domain.Order.ValueObjects.OrderProcessed", "Processed", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("TEXT");

                            b1.Property<bool>("IsProcessed")
                                .HasColumnType("INTEGER");

                            b1.Property<DateTime?>("ProcessedAt")
                                .HasColumnType("TEXT");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsMany("Inventory.Domain.Order.OrderItem.OrderItem", "OrderItems", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("TEXT")
                                .HasColumnName("OrderId");

                            b1.Property<Guid?>("OrderItemId")
                                .HasColumnType("TEXT");

                            b1.HasKey("Id");

                            b1.HasIndex("OrderItemId");

                            b1.ToTable("OrderItems", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("OrderItemId");

                            b1.OwnsOne("Inventory.Domain.Order.OrderItem.ValueObjects.OrderItemAmount", "Amount", b2 =>
                                {
                                    b2.Property<Guid>("OrderItemId")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("Value")
                                        .HasColumnType("INTEGER");

                                    b2.HasKey("OrderItemId");

                                    b2.ToTable("OrderItems");

                                    b2.WithOwner()
                                        .HasForeignKey("OrderItemId");
                                });

                            b1.OwnsOne("Inventory.Domain.Order.OrderItem.ValueObjects.OrderItemGoods", "Goods", b2 =>
                                {
                                    b2.Property<Guid>("OrderItemId")
                                        .HasColumnType("TEXT");

                                    b2.Property<Guid>("Id")
                                        .HasColumnType("TEXT");

                                    b2.HasKey("OrderItemId");

                                    b2.ToTable("OrderItems");

                                    b2.WithOwner()
                                        .HasForeignKey("OrderItemId");
                                });

                            b1.OwnsOne("Inventory.Domain.Order.OrderItem.ValueObjects.OrderItemPrice", "Price", b2 =>
                                {
                                    b2.Property<Guid>("OrderItemId")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("Currency")
                                        .HasColumnType("INTEGER");

                                    b2.Property<double>("Value")
                                        .HasColumnType("REAL");

                                    b2.HasKey("OrderItemId");

                                    b2.ToTable("OrderItems");

                                    b2.WithOwner()
                                        .HasForeignKey("OrderItemId");
                                });

                            b1.Navigation("Amount")
                                .IsRequired();

                            b1.Navigation("Goods")
                                .IsRequired();

                            b1.Navigation("Price")
                                .IsRequired();
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("OrderItems");

                    b.Navigation("Processed")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
